# In this model, we define a 2s3rladder model where each rung is a two-state model; it is the 2rst 
# version where the kon is 0 or konpositive mimicing a very sharp sigmoidal 
# MOREOVER there is no delay in this version but a "degradation" rate
# Gregory Roth
# First version:            15.08.2023
# Modified:                 15.01.2024
#
#-----------------------------------------------------------------------------------------------
module ladder_2s_3r_theory

using LinearAlgebra

export buildMatrices, modeloutputs, mrnaoutput

function buildMatrices(parameters, maxrna)  
    (k5p,k5m,k4p,k4m,k3p,k2p,k1p,k1m,kini,delta) =  parameters
    k2m = k1m
    k3m = k1m
     nbs = 6
     Qstate = [-(k1m+k4m) k1m k4m 0 0 0;
             k1p -(k1p+k4m) 0 k4m 0 0;
             k4p 0 -(k2m+k5m +k4p) k2m k5m 0;
             0 k4p k2p -(k2p+k4p+k5m) 0 k5m;
             0 0 k5p 0 -(k3m+k5p) k3m;
             0 0 0 k5p k3p -(k3p+k5p)]
     
     
     initiationstates = [1,3,5]
     initiationrates = zeros(nbs)
     initiationrates[initiationstates] .= kini
     el = 1:1:maxrna
     ee = ones(maxrna)
     
     P1 = kron(Matrix(1I, maxrna+1, maxrna+1),Qstate )
     P2 = kron(diagm(1 =>ee),diagm(initiationrates))
     P3 = kron(diagm(-1 =>el),delta.*Matrix(1I, nbs, nbs))
     
     Q= P1 + P2 +P3
     for i in axes(Q,1)
         Q[i,i] = Q[i,i] -sum(Q[i,:])
     end
 
     P = exp(Q .* 1)
 
     stateB = [x for x in nbs+1 :(maxrna+1)*nbs]
     stateN = [x for x in 1 : nbs]
     
     
     totnbs = (maxrna+1)*nbs
     Pwos = zeros(totnbs+length(stateB),totnbs+length(stateB))
     for i in axes(P,1)
         if i in stateB
             for j in axes(P)
                 Pwos[i,j] = P[i,j]
             end
         else
             for (j,s) in enumerate(stateB)
                 Pwos[i,j+totnbs] = P[i,s]
             end
             for (j,s) in enumerate(stateN)
                 Pwos[i,s] = P[i,s]
             end
         end
     end
     for (i,s) in enumerate(stateB)
         for j in axes(Pwos)
             Pwos[i+totnbs,j] = Pwos[s,j]
         end
     end
     

    return Q, P, Pwos

end


function buildMatrices_wosrna(parameters, maxrna, minnbrna)  
    (k5p,k5m,k4p,k4m,k3p,k2p,k1p,k1m,kini,delta) =  parameters
    k2m = k1m
    k3m = k1m
     nbs = 6
     Qstate = [-(k1m+k4m) k1m k4m 0 0 0;
             k1p -(k1p+k4m) 0 k4m 0 0;
             k4p 0 -(k2m+k5m +k4p) k2m k5m 0;
             0 k4p k2p -(k2p+k4p+k5m) 0 k5m;
             0 0 k5p 0 -(k3m+k5p) k3m;
             0 0 0 k5p k3p -(k3p+k5p)]
     
     
     initiationstates = [1,3,5]
     initiationrates = zeros(nbs)
     initiationrates[initiationstates] .= kini
     el = 1:1:maxrna
     ee = ones(maxrna)
     
     P1 = kron(Matrix(1I, maxrna+1, maxrna+1),Qstate )
     P2 = kron(diagm(1 =>ee),diagm(initiationrates))
     P3 = kron(diagm(-1 =>el),delta.*Matrix(1I, nbs, nbs))
     
     Q= P1 + P2 +P3
     for i in axes(Q,1)
         Q[i,i] = Q[i,i] -sum(Q[i,:])
     end
 
     P = exp(Q .* 1)
 
     stateB = [x for x in minnbrna*nbs+1 :(maxrna+1)*nbs]
     stateN = [x for x in 1 : minnbrna*nbs]
     
     
     totnbs = (maxrna+1)*nbs
     Pwos = zeros(totnbs+length(stateB),totnbs+length(stateB))
     for i in axes(P,1)
         if i in stateB
             for j in axes(P)
                 Pwos[i,j] = P[i,j]
             end
         else
             for (j,s) in enumerate(stateB)
                 Pwos[i,j+totnbs] = P[i,s]
             end
             for (j,s) in enumerate(stateN)
                 Pwos[i,s] = P[i,s]
             end
         end
     end
     for (i,s) in enumerate(stateB)
         for j in axes(Pwos)
             Pwos[i+totnbs,j] = Pwos[s,j]
         end
     end
     

    return Q, P, Pwos

end


function modeloutputs(parameters,maxrna,tmaxon,tmaxoff,tmaxnextburst,tmaxintensity) 
    nbs = 6
    totnbs = (maxrna+1)*nbs
    timevec_on = 1:1:tmaxon
    timevec_off = 1:1:tmaxoff
    timevec_nextburst = 1:1:tmaxnextburst
    timevec_intensity = 1:1:tmaxintensity
    #build the model matrices 
    (Q,P,Pwos) = ladder_2s_3r_theory.buildMatrices(parameters,maxrna)


    #nascent mrna
    evs = eigvecs(Q')
    ssp = real.(evs[:,end]./sum(evs[:,end]))
    stateBns = [x for x in 2*nbs+1 :(maxrna+1)*nbs]

    pB = sum(ssp[stateBns])
    prna = ssp'kron(diagm(ones(maxrna+1)), ones(nbs))
    mnascentmrna_model = [x for x in 2 : maxrna]'prna[3:end]./pB
    
    #on times
    stateTr_on = [x for x in nbs+1 :(maxrna+1)*nbs]
    stateAbs_on = [x for x in 1 : nbs]
    
    weightsAbs_on = ssp[stateAbs_on]./sum(ssp[stateAbs_on])     
    weightsTr_on = weightsAbs_on' * P[stateAbs_on,stateTr_on]./sum(weightsAbs_on' * P[stateAbs_on,stateTr_on])
    
    PabsOn = P[stateTr_on,stateTr_on]
    tempdist = weightsTr_on
    survivalspot_model_full = Vector{Float64}(undef,tmaxon)
    for i in 1:maximum(timevec_on)
        tempdist = tempdist* PabsOn
        survivalspot_model_full[i] = sum(tempdist)
    end 
    survivalspot_model_full =   survivalspot_model_full./survivalspot_model_full[1]

    #off times
    evsdwos = eigvecs(Pwos')
    sspdwos = real.(evsdwos[:,end]./sum(evsdwos[:,end]))
    
    stateAbs_off_wos = [x for x in nbs+1 :(maxrna+1)*nbs]
    stateTr_off_wos = vcat([x for x in 1 : nbs],[x for x in totnbs+1 : totnbs+length(stateAbs_off_wos)])
    
    weightsAbs_off_wos = sspdwos[stateAbs_off_wos]./sum(sspdwos[stateAbs_off_wos])
    weightsTr_off_wos = weightsAbs_off_wos' * Pwos[stateAbs_off_wos,stateTr_off_wos]./sum(weightsAbs_off_wos' * Pwos[stateAbs_off_wos,stateTr_off_wos])
    
    PabsOff = Pwos[stateTr_off_wos,stateTr_off_wos]
    tempdist = weightsTr_off_wos * PabsOff
    survivaldark_model_full = Vector{Float64}(undef,tmaxoff)
    for i in 1:maximum(timevec_off)
        tempdist = tempdist* PabsOff
        survivaldark_model_full[i] = sum(tempdist)
    end 

    #next burst times
    sspTr_off_wos =sspdwos[stateTr_off_wos]./sum(sspdwos[stateTr_off_wos]) 
    tempdist = sspTr_off_wos' * PabsOff./sum(sspTr_off_wos' * PabsOff)
    survivalnextburst_model = Vector{Float64}(undef,tmaxnextburst)
    for i in 1:maximum(timevec_nextburst)
        tempdist = tempdist* PabsOff
        survivalnextburst_model[i] = sum(tempdist)
    end 

    #probability to observer a burst, without singlets
    stateBwos = [x for x in nbs+1 :(maxrna+1)*nbs]
    statePreB = [x for x in totnbs+1 : totnbs+length(stateAbs_off_wos)]
    sspPreB = sspdwos[statePreB]
    pPreBandB = sum(sspPreB'Pwos[statePreB,stateBwos])
    pburst_model = sum(sspdwos[stateBwos]) + pPreBandB

    #correlation of the interburst durations
    #Qnw =  P[stateAbs_on,stateAbs_on]
    #Rnw =  P[stateAbs_on,stateTr_on]
    Qn = Pwos[stateTr_off_wos,stateTr_off_wos]
    Rn = Pwos[stateTr_off_wos,stateAbs_off_wos]
    Qb = Pwos[stateAbs_off_wos,stateAbs_off_wos]
    Rb = Pwos[stateAbs_off_wos,stateTr_off_wos]
    c = ones(length(stateTr_off_wos))

    Nn = (I - Qn)^(-1)
    Nb = (I - Qb)^(-1)

    cortemp=0
    #wpre = weightsAbs_on'*Qnw
    wprewos = weightsTr_off_wos*Qn
    for t=1:15000
        wpre2 = wprewos*Rn./sum(wprewos)
        wpre3 = wpre2*Nb*Rb./sum(wpre2)
        ET2t = wpre3*Nn*c .-1
        cortemp = cortemp + t*ET2t[1]*sum(wprewos*Rn)
        #wpre = wpre*Qnw
        wprewos = wprewos*Qn
        if sum(wprewos)<1e-6
            break
        end
    end
    Et1 = weightsTr_off_wos*Nn*c .- 1
    M2T = 2*weightsTr_off_wos*(Nn-I)*Nn*c .+ 1 .- weightsTr_off_wos*Nn*c
    VarT = M2T[1] - Et1[1]^2
    
    corr_interburst = (cortemp-Et1[1]^2)/VarT

    #average intensity track 

    weightsPreB_d_wos = sspdwos[statePreB]./sum(sspdwos[statePreB])
    weightsN_d_wos = weightsPreB_d_wos' * Pwos[statePreB,stateBwos]./sum(weightsPreB_d_wos' * Pwos[statePreB,stateBwos])
 
    rnanbvec_on = vcat(kron([x for x in 1:maxrna],ones(nbs)))

    Pabs = Pwos[stateBwos,stateBwos]

    intensitytemp = weightsN_d_wos
    intensity_model = Vector{Float64}(undef,length(timevec_intensity))
    intensity_model[1] = (rnanbvec_on'*(weightsPreB_d_wos.*sum(Pwos[statePreB,stateBwos], dims=2))./sum((weightsPreB_d_wos.*sum(Pwos[statePreB,stateBwos], dims=2))))[1]
    for i in Iterators.drop(eachindex(timevec_intensity),1)
        intensity_model[i] = ( intensitytemp*rnanbvec_on)[1]
        intensitytemp = intensitytemp* Pabs
    end 

    return  mnascentmrna_model, pburst_model, survivalspot_model_full,survivaldark_model_full, survivalnextburst_model, corr_interburst, intensity_model
end
    

function modeloutputs_withsinglets(parameters,maxrna,tmaxon,tmaxoff,tmaxnextburst,tmaxintensity) 
    nbs = 6
    totnbs = (maxrna+1)*nbs
    timevec_on = 1:1:tmaxon
    timevec_off = 1:1:tmaxoff
    timevec_nextburst = 1:1:tmaxnextburst
    timevec_intensity = 1:1:tmaxintensity
    #build the model matrices 
    (Q,P,Pwos) = ladder_2s_3r_theory.buildMatrices(parameters,maxrna)


    #nascent mrna
    evs = eigvecs(Q')
    ssp = real.(evs[:,end]./sum(evs[:,end]))
    stateBns = [x for x in 2*nbs+1 :(maxrna+1)*nbs]

    pB = sum(ssp[stateBns])
    prna = ssp'kron(diagm(ones(maxrna+1)), ones(nbs))
    mnascentmrna_model = [x for x in 2 : maxrna]'prna[3:end]./pB
    
    #on times
    stateTr_on = [x for x in nbs+1 :(maxrna+1)*nbs]
    stateAbs_on = [x for x in 1 : nbs]
    
    weightsAbs_on = ssp[stateAbs_on]./sum(ssp[stateAbs_on])     
    weightsTr_on = weightsAbs_on' * P[stateAbs_on,stateTr_on]./sum(weightsAbs_on' * P[stateAbs_on,stateTr_on])
    
    PabsOn = P[stateTr_on,stateTr_on]
    tempdist = weightsTr_on
    survivalspot_model_full = Vector{Float64}(undef,tmaxon)
    for i in 1:maximum(timevec_on)
        tempdist = tempdist* PabsOn
        survivalspot_model_full[i] = sum(tempdist)
    end 
  
    #off times    
    stateAbs_off = [x for x in nbs+1 :(maxrna+1)*nbs]
    stateTr_off = [x for x in 1 : nbs]
    
    weightsAbs_off = ssp[stateAbs_off]./sum(ssp[stateAbs_off])
    weightsTr_off = weightsAbs_off' * P[stateAbs_off,stateTr_off]./sum(weightsAbs_off' * P[stateAbs_off,stateTr_off])
    
    PabsOff = P[stateTr_off,stateTr_off]
    tempdist = weightsTr_off
    survivaldark_model_full = Vector{Float64}(undef,tmaxoff)
    for i in 1:maximum(timevec_off)
        tempdist = tempdist* PabsOff
        survivaldark_model_full[i] = sum(tempdist)
    end 

    #next burst times
    sspTr_off =ssp[stateTr_off]./sum(ssp[stateTr_off]) 
    tempdist = sspTr_off'
    survivalnextburst_model = Vector{Float64}(undef,tmaxnextburst)
    for i in 1:maximum(timevec_nextburst)
        tempdist = tempdist* PabsOff
        survivalnextburst_model[i] = sum(tempdist)
    end 

    #probability to observer a burst
    pburst_model = sum(ssp[stateTr_on]) 

    #correlation of the interburst durations
    Qn = P[stateAbs_on,stateAbs_on]
    Rn = P[stateAbs_on,stateTr_on]

    Qb = P[stateTr_on,stateTr_on]
    Rb = P[stateTr_on,stateAbs_on]
    c = ones(length(stateAbs_on))

    Nn = (I - Qn)^(-1)
    Nb = (I - Qb)^(-1)

    cortemp=0
    wpre = weightsTr_off
    for t=1:15000
        wpre2 = wpre*Rn./sum(wpre)
        wpre3 = wpre2*Nb*Rb./sum(wpre2)
        ET2t = wpre3*Nn*c 
        cortemp = cortemp + t*ET2t[1]*sum(wpre*Rn)
        wpre = wpre*Qn
        if sum(wpre)<1e-6
            break
        end
    end
    Et1 = weightsTr_off*Nn*c 
    M2T = weightsTr_off*(2*Nn-I)*Nn*c
    VarT = M2T[1] - Et1[1]^2
    
    corr_interburst = (cortemp-Et1[1]^2)/VarT

    #average intensity track 

    #sspTr_off = weightsPreB = ssp[stateAbs_on]./sum(ssp[stateAbs_on])
    weightsON = sspTr_off' * P[stateTr_off,stateAbs_off]./sum(sspTr_off' * P[stateTr_off,stateAbs_off])
 
    rnanbvec_on = vcat(kron([x for x in 1:maxrna],ones(nbs)))

    Pabs = Qb

    intensitytemp = weightsON
    intensity_model = Vector{Float64}(undef,length(timevec_intensity))
    for i in eachindex(timevec_intensity)
        intensity_model[i] = (intensitytemp*rnanbvec_on)[1]
        intensitytemp = intensitytemp* Pabs
    end 

    return  mnascentmrna_model, pburst_model, survivalspot_model_full,survivaldark_model_full, survivalnextburst_model, corr_interburst, intensity_model
end
    
function modeloutputs_wosrna(parameters,maxrna,minnbrna,tmaxon,tmaxoff,tmaxnextburst,tmaxintensity) 
    nbs = 6
    totnbs = (maxrna+1)*nbs
    timevec_on = 1:1:tmaxon
    timevec_off = 1:1:tmaxoff
    timevec_nextburst = 1:1:tmaxnextburst
    timevec_intensity = 1:1:tmaxintensity
    #build the model matrices 
    (Q,P,Pwos) = ladder_2s_3r_theory.buildMatrices_wosrna(parameters,maxrna,minnbrna)


    #nascent mrna
    evs = eigvecs(Q')
    ssp = real.(evs[:,end]./sum(evs[:,end]))
    stateBns = [x for x in 2*nbs+1 :(maxrna+1)*nbs]

    pB = sum(ssp[stateBns])
    prna = ssp'kron(diagm(ones(maxrna+1)), ones(nbs))
    mnascentmrna_model = [x for x in 2 : maxrna]'prna[3:end]./pB
    
    #on times
    stateTr_on = [x for x in minnbrna*nbs+1 :(maxrna+1)*nbs]
    stateAbs_on = [x for x in 1 : minnbrna*nbs]
    
    weightsAbs_on = ssp[stateAbs_on]./sum(ssp[stateAbs_on])     
    weightsTr_on = weightsAbs_on' * P[stateAbs_on,stateTr_on]./sum(weightsAbs_on' * P[stateAbs_on,stateTr_on])
    
    PabsOn = P[stateTr_on,stateTr_on]
    tempdist = weightsTr_on
    survivalspot_model_full = Vector{Float64}(undef,tmaxon)
    for i in 1:maximum(timevec_on)
        tempdist = tempdist* PabsOn
        survivalspot_model_full[i] = sum(tempdist)
    end 
    survivalspot_model_full =   survivalspot_model_full./survivalspot_model_full[1]

    #off times
    evsdwos = eigvecs(Pwos')
    sspdwos = real.(evsdwos[:,end]./sum(evsdwos[:,end]))
    
    stateAbs_off_wos = [x for x in minnbrna*nbs+1 :(maxrna+1)*nbs]
    stateTr_off_wos = vcat([x for x in 1 : minnbrna*nbs],[x for x in totnbs+1 : totnbs+length(stateAbs_off_wos)])
    
    weightsAbs_off_wos = sspdwos[stateAbs_off_wos]./sum(sspdwos[stateAbs_off_wos])
    weightsTr_off_wos = weightsAbs_off_wos' * Pwos[stateAbs_off_wos,stateTr_off_wos]./sum(weightsAbs_off_wos' * Pwos[stateAbs_off_wos,stateTr_off_wos])
    
    PabsOff = Pwos[stateTr_off_wos,stateTr_off_wos]
    tempdist = weightsTr_off_wos * PabsOff
    survivaldark_model_full = Vector{Float64}(undef,tmaxoff)
    for i in 1:maximum(timevec_off)
        tempdist = tempdist* PabsOff
        survivaldark_model_full[i] = sum(tempdist)
    end 

    #next burst times
    sspTr_off_wos =sspdwos[stateTr_off_wos]./sum(sspdwos[stateTr_off_wos]) 
    tempdist = sspTr_off_wos' * PabsOff
    survivalnextburst_model = Vector{Float64}(undef,tmaxnextburst)
    for i in 1:maximum(timevec_nextburst)
        tempdist = tempdist* PabsOff
        survivalnextburst_model[i] = sum(tempdist)
    end 

    #probability to observer a burst, without singlets
    stateBwos = [x for x in minnbrna*nbs+1 :(maxrna+1)*nbs]
    statePreB = [x for x in totnbs+1 : totnbs+length(stateAbs_off_wos)]
    sspPreB = sspdwos[statePreB]
    pPreBandB = sum(sspPreB'Pwos[statePreB,stateBwos])
    pburst_model = sum(sspdwos[stateBwos]) + pPreBandB

    #correlation of the interburst durations
    Qnw =  P[stateAbs_on,stateAbs_on]
    Rnw =  P[stateAbs_on,stateTr_on]
    Qn = Pwos[stateTr_off_wos,stateTr_off_wos]
    Rn = Pwos[stateTr_off_wos,stateAbs_off_wos]
    Qb = Pwos[stateAbs_off_wos,stateAbs_off_wos]
    Rb = Pwos[stateAbs_off_wos,stateTr_off_wos]
    c = ones(length(stateTr_off_wos))

    Nn = (I - Qn)^(-1)
    Nb = (I - Qb)^(-1)

    cortemp=0
    wpre = weightsAbs_on'*Qnw
    wprewos = weightsTr_off_wos*Qn
    for t=1:15000
        wpre2 = wpre*Rnw./sum(wpre)
        wpre3 = wpre2*Nb*Rb./sum(wpre2)
        ET2t = wpre3*Nn*c .-1
        cortemp = cortemp + t*ET2t[1]*sum(wprewos*Rn)
        wpre = wpre*Qnw
        wprewos = wprewos*Qn
        if sum(wpre)<1e-6
            break
        end
    end
    Et1 = weightsTr_off_wos*Nn*c .- 1
    M2T = 2*weightsTr_off_wos*(Nn-I)*Nn*c .+ 1 .- weightsTr_off_wos*Nn*c
    VarT = M2T[1] - Et1[1]^2
    
    corr_interburst = (cortemp-Et1[1]^2)/VarT

    #average intensity track 

    weightsPreB_d_wos = sspdwos[statePreB]./sum(sspdwos[statePreB])
    weightsN_d_wos = weightsPreB_d_wos' * Pwos[statePreB,stateBwos]./sum(weightsPreB_d_wos' * Pwos[statePreB,stateBwos])
 
    rnanbvec_on = vcat(kron([x for x in 1:maxrna],ones(nbs)))

    Pabs = Pwos[stateBwos,stateBwos]

    intensitytemp = weightsN_d_wos
    intensity_model = Vector{Float64}(undef,length(timevec_intensity))
    intensity_model[1] = (rnanbvec_on'*(weightsPreB_d_wos.*sum(Pwos[statePreB,stateBwos], dims=2))./sum((weightsPreB_d_wos.*sum(Pwos[statePreB,stateBwos], dims=2))))[1]
    for i in Iterators.drop(eachindex(timevec_intensity),1)
        intensity_model[i] = ( intensitytemp*rnanbvec_on)[1]
        intensitytemp = intensitytemp* Pabs
    end 

    return  mnascentmrna_model, pburst_model, survivalspot_model_full,survivaldark_model_full, survivalnextburst_model, corr_interburst, intensity_model
end


function mrnaoutput(parameters,maxrna) 
    nbs = 6
    #build the model matrices 
    (k5p,k5m,k4p,k4m,k3p,k2p,k1p,k1m,kini,delta) =  parameters
    k2m = k1m
    k3m = k1m
     nbs = 6
     Qstate = [-(k1m+k4m) k1m k4m 0 0 0;
             k1p -(k1p+k4m) 0 k4m 0 0;
             k4p 0 -(k2m+k5m +k4p) k2m k5m 0;
             0 k4p k2p -(k2p+k4p+k5m) 0 k5m;
             0 0 k5p 0 -(k3m+k5p) k3m;
             0 0 0 k5p k3p -(k3p+k5p)]
     
     
     initiationstates = [1,3,5]
     initiationrates = zeros(nbs)
     initiationrates[initiationstates] .= kini
     el = 1:1:maxrna
     ee = ones(maxrna)
     
     P1 = kron(Matrix(1I, maxrna+1, maxrna+1),Qstate )
     P2 = kron(diagm(1 =>ee),diagm(initiationrates))
     P3 = kron(diagm(-1 =>el),delta.*Matrix(1I, nbs, nbs))
     
     Q= P1 + P2 +P3
     for i in axes(Q,1)
         Q[i,i] = Q[i,i] -sum(Q[i,:])
     end
 
    #nascent mrna
    evs = eigvecs(Q')
    ssp = real.(evs[:,end]./sum(evs[:,end]))
    ssd_rna = ssp'kron(diagm(ones(maxrna+1)), ones(nbs))

    evs_s = eigvecs(Qstate')
    ssp_s = real.(evs_s[:,end]./sum(evs_s[:,end]))
    ssd_on = sum(ssp_s[[1,3,5]])
    return  ssd_rna, ssd_on
end

end